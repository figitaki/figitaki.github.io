{"version":3,"sources":["logo.svg","components/Card/index.js","components/Card/Card.jsx","components/Button/index.js","components/Button/Button.jsx","pages/Home.jsx","components/TextInput/index.js","components/TextInput/TextInput.js","components/Backdrop.jsx","pages/Result.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Card","_ref","children","react_default","a","createElement","class","Button","onClick","className","Home","handleChange","e","target","files","length","Promise","all","Array","from","map","image","createImageBitmap","then","images","_this","props","onUpload","slice","openPicker","fileInput","click","_this2","this","components_Card","components_Button","style","fontSize","ref","input","onChange","display","accept","multiple","type","React","Component","TextInput","placeholder","drawScreenshot","ctx","screenshot","x","ratio","width","shadowColor","shadowBlur","drawImage","height","fillStyle","font","textAlign","fillText","label","Backdrop","refs","canvas","getContext","scale","update","screenshots","fillRect","WIDTH","output","src","toDataURL","Result","state","labels","index","newLabels","value","setState","Object","objectSpread","Backdrop_Backdrop","concat","_","components_TextInput","App","Result_Result","Home_Home","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.223b8f8e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import Card from './Card'\nexport default Card\n","import React from 'react'\nimport './Card.css'\n\nexport default ({ children }) => <div class=\"card\">{children}</div>\n","import Button from './Button'\nexport default Button\n","import React from 'react'\nimport './Button.css'\n\nexport default ({ onClick, children }) => (\n  <button className=\"btn\" onClick={onClick}>\n    {children}\n  </button>\n)\n","import React from 'react'\n\nimport Card from '../components/Card'\nimport Button from '../components/Button'\n\nexport default class Home extends React.Component {\n  handleChange = e => {\n    if (!e.target.files.length) return\n    Promise.all(\n      Array.from(e.target.files).map(image => createImageBitmap(image))\n    ).then(images => {\n      this.props.onUpload && this.props.onUpload(images.slice(0, 3))\n    })\n  }\n\n  openPicker = () => {\n    this.fileInput.click()\n  }\n\n  render() {\n    return (\n      <Card>\n        <h1>ðŸ“¸ Backdrop</h1>\n        <p>Because screenshots were meant to be lit</p>\n        <Button onClick={this.openPicker}>Upload Your Screenshots</Button>\n        <p style={{ fontSize: '12px' }}>\n          We recommend 2 images for before & after shots <br />\n          or 3 for device size comparisons.\n        </p>\n        <input\n          ref={input => (this.fileInput = input)}\n          onChange={this.handleChange}\n          style={{ display: 'none' }}\n          accept=\"image/png\"\n          multiple\n          type=\"file\"\n        />\n      </Card>\n    )\n  }\n}\n","import TextInput from './TextInput'\nexport default TextInput\n","import React from 'react'\nimport './TextInput.css'\n\nexport default ({ onChange }) => (\n  <input\n    type=\"text\"\n    onChange={onChange}\n    className=\"textInput\"\n    placeholder=\"Label\"\n  />\n)\n","import React from 'react'\n\nconst WIDTH = 665\n\n// screenshot is an object with image and label\nlet drawScreenshot = (ctx, screenshot, x) => {\n  let ratio = 175 / screenshot.image.width\n  let y = 45\n\n  ctx.shadowColor = 'black'\n  ctx.shadowBlur = 6\n  ctx.drawImage(\n    screenshot.image,\n    x,\n    y + (400 - screenshot.image.height * ratio),\n    screenshot.image.width * ratio,\n    screenshot.image.height * ratio\n  )\n\n  ctx.fillStyle = 'white'\n  ctx.shadowBlur = 0\n  ctx.font = '16px Graphik-Medium'\n  ctx.textAlign = 'center'\n  ctx.fillText(screenshot.label, x + (screenshot.image.width * ratio) / 2, 475)\n}\n\nexport default class Backdrop extends React.Component {\n  componentDidMount() {\n    const canvas = this.refs.canvas\n    const ctx = canvas.getContext('2d')\n\n    // Setup canvas and fill background\n    ctx.scale(2, 2)\n\n    this.update()\n  }\n\n  componentDidUpdate() {\n    this.update()\n  }\n\n  update() {\n    const canvas = this.refs.canvas\n    const ctx = canvas.getContext('2d')\n    const { screenshots } = this.props\n\n    ctx.fillStyle = '#1945EA'\n    ctx.fillRect(0, 0, canvas.width, canvas.height)\n\n    // Layout the screenshots\n    if (screenshots.length === 1) {\n      drawScreenshot(ctx, screenshots[0], WIDTH / 2 - 175 / 2)\n    } else if (screenshots.length === 2) {\n      drawScreenshot(ctx, screenshots[0], WIDTH / 3 - 175 / 2)\n      drawScreenshot(ctx, screenshots[1], (WIDTH / 3) * 2 - 175 / 2)\n    } else {\n      drawScreenshot(ctx, screenshots[0], WIDTH / 5 - 175 / 2)\n      drawScreenshot(ctx, screenshots[1], (WIDTH / 5) * 2.5 - 175 / 2)\n      drawScreenshot(ctx, screenshots[2], (WIDTH / 5) * 4 - 175 / 2)\n    }\n\n    const output = this.refs.output\n    output.src = canvas.toDataURL('image/png')\n  }\n\n  render() {\n    return (\n      <div>\n        <canvas\n          ref=\"canvas\"\n          width=\"1330\"\n          height=\"1024\"\n          style={{ display: 'none' }}\n        />\n        <img ref=\"output\" width=\"600\" height=\"460\" />\n      </div>\n    )\n  }\n}\n","import React from 'react'\n\nimport Card from '../components/Card'\nimport TextInput from '../components/TextInput'\nimport Backdrop from '../components/Backdrop'\n\nexport default class Result extends React.Component {\n  state = {\n    labels: {},\n  }\n\n  handleChange = (e, index) => {\n    const { labels } = this.state\n\n    const newLabels = {}\n    newLabels[index] = e.target.value\n\n    this.setState({\n      labels: {\n        ...labels,\n        ...newLabels,\n      },\n    })\n  }\n\n  render() {\n    const { images } = this.props\n    const { labels } = this.state\n    return (\n      <Card>\n        <h1>ðŸ“¸ Backdrop</h1>\n        <p>Because screenshots were meant to be lit</p>\n        <Backdrop\n          screenshots={images.map((image, index) => ({\n            image,\n            label: labels[index] || `Image ${index + 1}`,\n          }))}\n        />\n        <div className=\"textFields\">\n          {images.map((_, index) => (\n            <TextInput onChange={e => this.handleChange(e, index)} />\n          ))}\n        </div>\n      </Card>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport logo from './logo.svg'\nimport './App.css'\n\nimport Home from './pages/Home'\nimport Result from './pages/Result'\n\nclass App extends Component {\n  state = {\n    images: [],\n  }\n\n  render() {\n    const { images } = this.state\n    return (\n      <div className=\"App\">\n        {images.length ? (\n          <Result images={images} />\n        ) : (\n          <Home onUpload={images => this.setState({ images })} />\n        )}\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}